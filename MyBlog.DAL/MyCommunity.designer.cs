#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyBlog.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyCommunity")]
	public partial class MyCommunityDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertCityPic(CityPic instance);
    partial void UpdateCityPic(CityPic instance);
    partial void DeleteCityPic(CityPic instance);
    partial void InsertZan(Zan instance);
    partial void UpdateZan(Zan instance);
    partial void DeleteZan(Zan instance);
    partial void InsertCollect(Collect instance);
    partial void UpdateCollect(Collect instance);
    partial void DeleteCollect(Collect instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertFan(Fan instance);
    partial void UpdateFan(Fan instance);
    partial void DeleteFan(Fan instance);
    partial void InsertMajor(Major instance);
    partial void UpdateMajor(Major instance);
    partial void DeleteMajor(Major instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertPhoto(Photo instance);
    partial void UpdatePhoto(Photo instance);
    partial void DeletePhoto(Photo instance);
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    partial void InsertTopic(Topic instance);
    partial void UpdateTopic(Topic instance);
    partial void DeleteTopic(Topic instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertWatch(Watch instance);
    partial void UpdateWatch(Watch instance);
    partial void DeleteWatch(Watch instance);
    #endregion
		
		public MyCommunityDataContext() : 
				base(global::MyBlog.DAL.Properties.Settings.Default.MyCommunityConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public MyCommunityDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyCommunityDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyCommunityDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyCommunityDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CityPic> CityPic
		{
			get
			{
				return this.GetTable<CityPic>();
			}
		}
		
		public System.Data.Linq.Table<Zan> Zan
		{
			get
			{
				return this.GetTable<Zan>();
			}
		}
		
		public System.Data.Linq.Table<Collect> Collect
		{
			get
			{
				return this.GetTable<Collect>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comment
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Fan> Fan
		{
			get
			{
				return this.GetTable<Fan>();
			}
		}
		
		public System.Data.Linq.Table<Major> Major
		{
			get
			{
				return this.GetTable<Major>();
			}
		}
		
		public System.Data.Linq.Table<Message> Message
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photo
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<Province> Province
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
		
		public System.Data.Linq.Table<Topic> Topic
		{
			get
			{
				return this.GetTable<Topic>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Watch> Watch
		{
			get
			{
				return this.GetTable<Watch>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CityPic")]
	public partial class CityPic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityPicId;
		
		private int _ProvinceId;
		
		private string _CityPicUrl;
		
		private EntityRef<Province> _Province;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityPicIdChanging(int value);
    partial void OnCityPicIdChanged();
    partial void OnProvinceIdChanging(int value);
    partial void OnProvinceIdChanged();
    partial void OnCityPicUrlChanging(string value);
    partial void OnCityPicUrlChanged();
    #endregion
		
		public CityPic()
		{
			this._Province = default(EntityRef<Province>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityPicId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityPicId
		{
			get
			{
				return this._CityPicId;
			}
			set
			{
				if ((this._CityPicId != value))
				{
					this.OnCityPicIdChanging(value);
					this.SendPropertyChanging();
					this._CityPicId = value;
					this.SendPropertyChanged("CityPicId");
					this.OnCityPicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceId", DbType="Int NOT NULL")]
		public int ProvinceId
		{
			get
			{
				return this._ProvinceId;
			}
			set
			{
				if ((this._ProvinceId != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._ProvinceId = value;
					this.SendPropertyChanged("ProvinceId");
					this.OnProvinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityPicUrl", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CityPicUrl
		{
			get
			{
				return this._CityPicUrl;
			}
			set
			{
				if ((this._CityPicUrl != value))
				{
					this.OnCityPicUrlChanging(value);
					this.SendPropertyChanging();
					this._CityPicUrl = value;
					this.SendPropertyChanged("CityPicUrl");
					this.OnCityPicUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_CityPic", Storage="_Province", ThisKey="ProvinceId", OtherKey="ProvinceId", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.CityPic.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.CityPic.Add(this);
						this._ProvinceId = value.ProvinceId;
					}
					else
					{
						this._ProvinceId = default(int);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Zan")]
	public partial class Zan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZanId;
		
		private int _TopicId;
		
		private int _UserId;
		
		private EntityRef<Topic> _Topic;
		
		private EntityRef<User> _User;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZanIdChanging(int value);
    partial void OnZanIdChanged();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public Zan()
		{
			this._Topic = default(EntityRef<Topic>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZanId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ZanId
		{
			get
			{
				return this._ZanId;
			}
			set
			{
				if ((this._ZanId != value))
				{
					this.OnZanIdChanging(value);
					this.SendPropertyChanging();
					this._ZanId = value;
					this.SendPropertyChanged("ZanId");
					this.OnZanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicId", DbType="Int NOT NULL")]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Topic_Zan", Storage="_Topic", ThisKey="TopicId", OtherKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.Zan.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.Zan.Add(this);
						this._TopicId = value.TopicId;
					}
					else
					{
						this._TopicId = default(int);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Zan", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Zan.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Zan.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Collect")]
	public partial class Collect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CollectId;
		
		private int _UserId;
		
		private int _TopicId;
		
		private EntityRef<Topic> _Topic;
		
		private EntityRef<User> _User;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectIdChanging(int value);
    partial void OnCollectIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    #endregion
		
		public Collect()
		{
			this._Topic = default(EntityRef<Topic>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CollectId
		{
			get
			{
				return this._CollectId;
			}
			set
			{
				if ((this._CollectId != value))
				{
					this.OnCollectIdChanging(value);
					this.SendPropertyChanging();
					this._CollectId = value;
					this.SendPropertyChanged("CollectId");
					this.OnCollectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicId", DbType="Int NOT NULL")]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Topic_Collect", Storage="_Topic", ThisKey="TopicId", OtherKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.Collect.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.Collect.Add(this);
						this._TopicId = value.TopicId;
					}
					else
					{
						this._TopicId = default(int);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Collect", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Collect.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Collect.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentId;
		
		private int _TopicId;
		
		private int _UserId;
		
		private string _CmtContent;
		
		private int _PreCmtId;
		
		private System.DateTime _CmtTime;
		
		private EntityRef<Topic> _Topic;
		
		private EntityRef<User> _User;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIdChanging(int value);
    partial void OnCommentIdChanged();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCmtContentChanging(string value);
    partial void OnCmtContentChanged();
    partial void OnPreCmtIdChanging(int value);
    partial void OnPreCmtIdChanged();
    partial void OnCmtTimeChanging(System.DateTime value);
    partial void OnCmtTimeChanged();
    #endregion
		
		public Comment()
		{
			this._Topic = default(EntityRef<Topic>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentId
		{
			get
			{
				return this._CommentId;
			}
			set
			{
				if ((this._CommentId != value))
				{
					this.OnCommentIdChanging(value);
					this.SendPropertyChanging();
					this._CommentId = value;
					this.SendPropertyChanged("CommentId");
					this.OnCommentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicId", DbType="Int NOT NULL")]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CmtContent", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string CmtContent
		{
			get
			{
				return this._CmtContent;
			}
			set
			{
				if ((this._CmtContent != value))
				{
					this.OnCmtContentChanging(value);
					this.SendPropertyChanging();
					this._CmtContent = value;
					this.SendPropertyChanged("CmtContent");
					this.OnCmtContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreCmtId", DbType="Int NOT NULL")]
		public int PreCmtId
		{
			get
			{
				return this._PreCmtId;
			}
			set
			{
				if ((this._PreCmtId != value))
				{
					this.OnPreCmtIdChanging(value);
					this.SendPropertyChanging();
					this._PreCmtId = value;
					this.SendPropertyChanged("PreCmtId");
					this.OnPreCmtIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CmtTime", DbType="DateTime NOT NULL")]
		public System.DateTime CmtTime
		{
			get
			{
				return this._CmtTime;
			}
			set
			{
				if ((this._CmtTime != value))
				{
					this.OnCmtTimeChanging(value);
					this.SendPropertyChanging();
					this._CmtTime = value;
					this.SendPropertyChanged("CmtTime");
					this.OnCmtTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Topic_Comment", Storage="_Topic", ThisKey="TopicId", OtherKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.Comment.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.Comment.Add(this);
						this._TopicId = value.TopicId;
					}
					else
					{
						this._TopicId = default(int);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comment.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comment.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fan")]
	public partial class Fan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FanId;
		
		private int _UserId;
		
		private int _FollowerId;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFanIdChanging(int value);
    partial void OnFanIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFollowerIdChanging(int value);
    partial void OnFollowerIdChanged();
    #endregion
		
		public Fan()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FanId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FanId
		{
			get
			{
				return this._FanId;
			}
			set
			{
				if ((this._FanId != value))
				{
					this.OnFanIdChanging(value);
					this.SendPropertyChanging();
					this._FanId = value;
					this.SendPropertyChanged("FanId");
					this.OnFanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowerId", DbType="Int NOT NULL")]
		public int FollowerId
		{
			get
			{
				return this._FollowerId;
			}
			set
			{
				if ((this._FollowerId != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFollowerIdChanging(value);
					this.SendPropertyChanging();
					this._FollowerId = value;
					this.SendPropertyChanged("FollowerId");
					this.OnFollowerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Fan", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Fan.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Fan.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Fan1", Storage="_User1", ThisKey="FollowerId", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Fan1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Fan1.Add(this);
						this._FollowerId = value.UserId;
					}
					else
					{
						this._FollowerId = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Major")]
	public partial class Major : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MajorId;
		
		private string _MajorName;
		
		private EntitySet<Topic> _Topic;
		
		private EntitySet<User> _User;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMajorIdChanging(int value);
    partial void OnMajorIdChanged();
    partial void OnMajorNameChanging(string value);
    partial void OnMajorNameChanged();
    #endregion
		
		public Major()
		{
			this._Topic = new EntitySet<Topic>(new Action<Topic>(this.attach_Topic), new Action<Topic>(this.detach_Topic));
			this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MajorId
		{
			get
			{
				return this._MajorId;
			}
			set
			{
				if ((this._MajorId != value))
				{
					this.OnMajorIdChanging(value);
					this.SendPropertyChanging();
					this._MajorId = value;
					this.SendPropertyChanged("MajorId");
					this.OnMajorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MajorName
		{
			get
			{
				return this._MajorName;
			}
			set
			{
				if ((this._MajorName != value))
				{
					this.OnMajorNameChanging(value);
					this.SendPropertyChanging();
					this._MajorName = value;
					this.SendPropertyChanged("MajorName");
					this.OnMajorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_Topic", Storage="_Topic", ThisKey="MajorId", OtherKey="MajorId")]
		public EntitySet<Topic> Topic
		{
			get
			{
				return this._Topic;
			}
			set
			{
				this._Topic.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_User", Storage="_User", ThisKey="MajorId", OtherKey="MajorId")]
		public EntitySet<User> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Topic(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_Topic(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
		
		private void attach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageId;
		
		private int _AuthorId;
		
		private int _UserId;
		
		private string _MessageContent;
		
		private System.DateTime _MessageTime;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIdChanging(int value);
    partial void OnMessageIdChanged();
    partial void OnAuthorIdChanging(int value);
    partial void OnAuthorIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnMessageContentChanging(string value);
    partial void OnMessageContentChanged();
    partial void OnMessageTimeChanging(System.DateTime value);
    partial void OnMessageTimeChanged();
    #endregion
		
		public Message()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="Int NOT NULL")]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageContent", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
		public string MessageContent
		{
			get
			{
				return this._MessageContent;
			}
			set
			{
				if ((this._MessageContent != value))
				{
					this.OnMessageContentChanging(value);
					this.SendPropertyChanging();
					this._MessageContent = value;
					this.SendPropertyChanged("MessageContent");
					this.OnMessageContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageTime", DbType="DateTime NOT NULL")]
		public System.DateTime MessageTime
		{
			get
			{
				return this._MessageTime;
			}
			set
			{
				if ((this._MessageTime != value))
				{
					this.OnMessageTimeChanging(value);
					this.SendPropertyChanging();
					this._MessageTime = value;
					this.SendPropertyChanged("MessageTime");
					this.OnMessageTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Message.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Message.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_User1", ThisKey="AuthorId", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Message1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Message1.Add(this);
						this._AuthorId = value.UserId;
					}
					else
					{
						this._AuthorId = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photo")]
	public partial class Photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhotoId;
		
		private int _UserId;
		
		private string _PhotoName;
		
		private string _PhotoUrl;
		
		private System.DateTime _PhotoTime;
		
		private EntityRef<User> _User;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhotoIdChanging(int value);
    partial void OnPhotoIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPhotoNameChanging(string value);
    partial void OnPhotoNameChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnPhotoTimeChanging(System.DateTime value);
    partial void OnPhotoTimeChanged();
    #endregion
		
		public Photo()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PhotoName
		{
			get
			{
				return this._PhotoName;
			}
			set
			{
				if ((this._PhotoName != value))
				{
					this.OnPhotoNameChanging(value);
					this.SendPropertyChanging();
					this._PhotoName = value;
					this.SendPropertyChanged("PhotoName");
					this.OnPhotoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoTime", DbType="DateTime NOT NULL")]
		public System.DateTime PhotoTime
		{
			get
			{
				return this._PhotoTime;
			}
			set
			{
				if ((this._PhotoTime != value))
				{
					this.OnPhotoTimeChanging(value);
					this.SendPropertyChanging();
					this._PhotoTime = value;
					this.SendPropertyChanged("PhotoTime");
					this.OnPhotoTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Photo", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Photo.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Photo.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Province")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProvinceId;
		
		private string _ProvinceName;
		
		private EntitySet<CityPic> _CityPic;
		
		private EntitySet<User> _User;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvinceIdChanging(int value);
    partial void OnProvinceIdChanged();
    partial void OnProvinceNameChanging(string value);
    partial void OnProvinceNameChanged();
    #endregion
		
		public Province()
		{
			this._CityPic = new EntitySet<CityPic>(new Action<CityPic>(this.attach_CityPic), new Action<CityPic>(this.detach_CityPic));
			this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProvinceId
		{
			get
			{
				return this._ProvinceId;
			}
			set
			{
				if ((this._ProvinceId != value))
				{
					this.OnProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._ProvinceId = value;
					this.SendPropertyChanged("ProvinceId");
					this.OnProvinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ProvinceName
		{
			get
			{
				return this._ProvinceName;
			}
			set
			{
				if ((this._ProvinceName != value))
				{
					this.OnProvinceNameChanging(value);
					this.SendPropertyChanging();
					this._ProvinceName = value;
					this.SendPropertyChanged("ProvinceName");
					this.OnProvinceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_CityPic", Storage="_CityPic", ThisKey="ProvinceId", OtherKey="ProvinceId")]
		public EntitySet<CityPic> CityPic
		{
			get
			{
				return this._CityPic;
			}
			set
			{
				this._CityPic.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_User", Storage="_User", ThisKey="ProvinceId", OtherKey="ProvinceId")]
		public EntitySet<User> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CityPic(CityPic entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_CityPic(CityPic entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
		
		private void attach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Topic")]
	public partial class Topic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TopicId;
		
		private int _AuthorId;
		
		private int _MajorId;
		
		private int _DiffLevel;
		
		private string _TopicTitle;
		
		private string _TopicContent;
		
		private System.DateTime _TopicTime;
		
		private int _LikesCount;
		
		private int _CommentCount;
		
		private EntitySet<Zan> _Zan;
		
		private EntitySet<Collect> _Collect;
		
		private EntitySet<Comment> _Comment;
		
		private EntityRef<Major> _Major;
		
		private EntityRef<User> _User;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnAuthorIdChanging(int value);
    partial void OnAuthorIdChanged();
    partial void OnMajorIdChanging(int value);
    partial void OnMajorIdChanged();
    partial void OnDiffLevelChanging(int value);
    partial void OnDiffLevelChanged();
    partial void OnTopicTitleChanging(string value);
    partial void OnTopicTitleChanged();
    partial void OnTopicContentChanging(string value);
    partial void OnTopicContentChanged();
    partial void OnTopicTimeChanging(System.DateTime value);
    partial void OnTopicTimeChanged();
    partial void OnLikesCountChanging(int value);
    partial void OnLikesCountChanged();
    partial void OnCommentCountChanging(int value);
    partial void OnCommentCountChanged();
    #endregion
		
		public Topic()
		{
			this._Zan = new EntitySet<Zan>(new Action<Zan>(this.attach_Zan), new Action<Zan>(this.detach_Zan));
			this._Collect = new EntitySet<Collect>(new Action<Collect>(this.attach_Collect), new Action<Collect>(this.detach_Collect));
			this._Comment = new EntitySet<Comment>(new Action<Comment>(this.attach_Comment), new Action<Comment>(this.detach_Comment));
			this._Major = default(EntityRef<Major>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="Int NOT NULL")]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorId", DbType="Int NOT NULL")]
		public int MajorId
		{
			get
			{
				return this._MajorId;
			}
			set
			{
				if ((this._MajorId != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorIdChanging(value);
					this.SendPropertyChanging();
					this._MajorId = value;
					this.SendPropertyChanged("MajorId");
					this.OnMajorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiffLevel", DbType="Int NOT NULL")]
		public int DiffLevel
		{
			get
			{
				return this._DiffLevel;
			}
			set
			{
				if ((this._DiffLevel != value))
				{
					this.OnDiffLevelChanging(value);
					this.SendPropertyChanging();
					this._DiffLevel = value;
					this.SendPropertyChanged("DiffLevel");
					this.OnDiffLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicTitle", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TopicTitle
		{
			get
			{
				return this._TopicTitle;
			}
			set
			{
				if ((this._TopicTitle != value))
				{
					this.OnTopicTitleChanging(value);
					this.SendPropertyChanging();
					this._TopicTitle = value;
					this.SendPropertyChanged("TopicTitle");
					this.OnTopicTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicContent", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string TopicContent
		{
			get
			{
				return this._TopicContent;
			}
			set
			{
				if ((this._TopicContent != value))
				{
					this.OnTopicContentChanging(value);
					this.SendPropertyChanging();
					this._TopicContent = value;
					this.SendPropertyChanged("TopicContent");
					this.OnTopicContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicTime", DbType="DateTime NOT NULL")]
		public System.DateTime TopicTime
		{
			get
			{
				return this._TopicTime;
			}
			set
			{
				if ((this._TopicTime != value))
				{
					this.OnTopicTimeChanging(value);
					this.SendPropertyChanging();
					this._TopicTime = value;
					this.SendPropertyChanged("TopicTime");
					this.OnTopicTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LikesCount", DbType="Int NOT NULL")]
		public int LikesCount
		{
			get
			{
				return this._LikesCount;
			}
			set
			{
				if ((this._LikesCount != value))
				{
					this.OnLikesCountChanging(value);
					this.SendPropertyChanging();
					this._LikesCount = value;
					this.SendPropertyChanged("LikesCount");
					this.OnLikesCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentCount", DbType="Int NOT NULL")]
		public int CommentCount
		{
			get
			{
				return this._CommentCount;
			}
			set
			{
				if ((this._CommentCount != value))
				{
					this.OnCommentCountChanging(value);
					this.SendPropertyChanging();
					this._CommentCount = value;
					this.SendPropertyChanged("CommentCount");
					this.OnCommentCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Topic_Zan", Storage="_Zan", ThisKey="TopicId", OtherKey="TopicId")]
		public EntitySet<Zan> Zan
		{
			get
			{
				return this._Zan;
			}
			set
			{
				this._Zan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Topic_Collect", Storage="_Collect", ThisKey="TopicId", OtherKey="TopicId")]
		public EntitySet<Collect> Collect
		{
			get
			{
				return this._Collect;
			}
			set
			{
				this._Collect.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Topic_Comment", Storage="_Comment", ThisKey="TopicId", OtherKey="TopicId")]
		public EntitySet<Comment> Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				this._Comment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_Topic", Storage="_Major", ThisKey="MajorId", OtherKey="MajorId", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.Topic.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.Topic.Add(this);
						this._MajorId = value.MajorId;
					}
					else
					{
						this._MajorId = default(int);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Topic", Storage="_User", ThisKey="AuthorId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Topic.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Topic.Add(this);
						this._AuthorId = value.UserId;
					}
					else
					{
						this._AuthorId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Zan(Zan entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_Zan(Zan entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
		
		private void attach_Collect(Collect entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_Collect(Collect entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
		
		private void attach_Comment(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_Comment(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _PassWord;
		
		private string _Email;
		
		private string _Sex;
		
		private string _School;
		
		private string _Education;
		
		private int _MajorId;
		
		private string _HeadPic;
		
		private string _StuCard;
		
		private int _ProvinceId;
		
		private int _CheckStatus;
		
		private System.DateTime _JoinTime;
		
		private EntitySet<Zan> _Zan;
		
		private EntitySet<Collect> _Collect;
		
		private EntitySet<Comment> _Comment;
		
		private EntitySet<Fan> _Fan;
		
		private EntitySet<Fan> _Fan1;
		
		private EntitySet<Message> _Message;
		
		private EntitySet<Message> _Message1;
		
		private EntitySet<Photo> _Photo;
		
		private EntitySet<Topic> _Topic;
		
		private EntitySet<Watch> _Watch;
		
		private EntitySet<Watch> _Watch1;
		
		private EntityRef<Major> _Major;
		
		private EntityRef<Province> _Province;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnSchoolChanging(string value);
    partial void OnSchoolChanged();
    partial void OnEducationChanging(string value);
    partial void OnEducationChanged();
    partial void OnMajorIdChanging(int value);
    partial void OnMajorIdChanged();
    partial void OnHeadPicChanging(string value);
    partial void OnHeadPicChanged();
    partial void OnStuCardChanging(string value);
    partial void OnStuCardChanged();
    partial void OnProvinceIdChanging(int value);
    partial void OnProvinceIdChanged();
    partial void OnCheckStatusChanging(int value);
    partial void OnCheckStatusChanged();
    partial void OnJoinTimeChanging(System.DateTime value);
    partial void OnJoinTimeChanged();
    #endregion
		
		public User()
		{
			this._Zan = new EntitySet<Zan>(new Action<Zan>(this.attach_Zan), new Action<Zan>(this.detach_Zan));
			this._Collect = new EntitySet<Collect>(new Action<Collect>(this.attach_Collect), new Action<Collect>(this.detach_Collect));
			this._Comment = new EntitySet<Comment>(new Action<Comment>(this.attach_Comment), new Action<Comment>(this.detach_Comment));
			this._Fan = new EntitySet<Fan>(new Action<Fan>(this.attach_Fan), new Action<Fan>(this.detach_Fan));
			this._Fan1 = new EntitySet<Fan>(new Action<Fan>(this.attach_Fan1), new Action<Fan>(this.detach_Fan1));
			this._Message = new EntitySet<Message>(new Action<Message>(this.attach_Message), new Action<Message>(this.detach_Message));
			this._Message1 = new EntitySet<Message>(new Action<Message>(this.attach_Message1), new Action<Message>(this.detach_Message1));
			this._Photo = new EntitySet<Photo>(new Action<Photo>(this.attach_Photo), new Action<Photo>(this.detach_Photo));
			this._Topic = new EntitySet<Topic>(new Action<Topic>(this.attach_Topic), new Action<Topic>(this.detach_Topic));
			this._Watch = new EntitySet<Watch>(new Action<Watch>(this.attach_Watch), new Action<Watch>(this.detach_Watch));
			this._Watch1 = new EntitySet<Watch>(new Action<Watch>(this.attach_Watch1), new Action<Watch>(this.detach_Watch1));
			this._Major = default(EntityRef<Major>);
			this._Province = default(EntityRef<Province>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_School", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string School
		{
			get
			{
				return this._School;
			}
			set
			{
				if ((this._School != value))
				{
					this.OnSchoolChanging(value);
					this.SendPropertyChanging();
					this._School = value;
					this.SendPropertyChanged("School");
					this.OnSchoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Education", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Education
		{
			get
			{
				return this._Education;
			}
			set
			{
				if ((this._Education != value))
				{
					this.OnEducationChanging(value);
					this.SendPropertyChanging();
					this._Education = value;
					this.SendPropertyChanged("Education");
					this.OnEducationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorId", DbType="Int NOT NULL")]
		public int MajorId
		{
			get
			{
				return this._MajorId;
			}
			set
			{
				if ((this._MajorId != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorIdChanging(value);
					this.SendPropertyChanging();
					this._MajorId = value;
					this.SendPropertyChanged("MajorId");
					this.OnMajorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadPic", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string HeadPic
		{
			get
			{
				return this._HeadPic;
			}
			set
			{
				if ((this._HeadPic != value))
				{
					this.OnHeadPicChanging(value);
					this.SendPropertyChanging();
					this._HeadPic = value;
					this.SendPropertyChanged("HeadPic");
					this.OnHeadPicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StuCard", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StuCard
		{
			get
			{
				return this._StuCard;
			}
			set
			{
				if ((this._StuCard != value))
				{
					this.OnStuCardChanging(value);
					this.SendPropertyChanging();
					this._StuCard = value;
					this.SendPropertyChanged("StuCard");
					this.OnStuCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceId", DbType="Int NOT NULL")]
		public int ProvinceId
		{
			get
			{
				return this._ProvinceId;
			}
			set
			{
				if ((this._ProvinceId != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._ProvinceId = value;
					this.SendPropertyChanged("ProvinceId");
					this.OnProvinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckStatus", DbType="Int NOT NULL")]
		public int CheckStatus
		{
			get
			{
				return this._CheckStatus;
			}
			set
			{
				if ((this._CheckStatus != value))
				{
					this.OnCheckStatusChanging(value);
					this.SendPropertyChanging();
					this._CheckStatus = value;
					this.SendPropertyChanged("CheckStatus");
					this.OnCheckStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoinTime", DbType="Date NOT NULL")]
		public System.DateTime JoinTime
		{
			get
			{
				return this._JoinTime;
			}
			set
			{
				if ((this._JoinTime != value))
				{
					this.OnJoinTimeChanging(value);
					this.SendPropertyChanging();
					this._JoinTime = value;
					this.SendPropertyChanged("JoinTime");
					this.OnJoinTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Zan", Storage="_Zan", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Zan> Zan
		{
			get
			{
				return this._Zan;
			}
			set
			{
				this._Zan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Collect", Storage="_Collect", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Collect> Collect
		{
			get
			{
				return this._Collect;
			}
			set
			{
				this._Collect.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comment", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Comment> Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				this._Comment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Fan", Storage="_Fan", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Fan> Fan
		{
			get
			{
				return this._Fan;
			}
			set
			{
				this._Fan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Fan1", Storage="_Fan1", ThisKey="UserId", OtherKey="FollowerId")]
		public EntitySet<Fan> Fan1
		{
			get
			{
				return this._Fan1;
			}
			set
			{
				this._Fan1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_Message", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Message> Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				this._Message.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_Message1", ThisKey="UserId", OtherKey="AuthorId")]
		public EntitySet<Message> Message1
		{
			get
			{
				return this._Message1;
			}
			set
			{
				this._Message1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Photo", Storage="_Photo", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Photo> Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				this._Photo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Topic", Storage="_Topic", ThisKey="UserId", OtherKey="AuthorId")]
		public EntitySet<Topic> Topic
		{
			get
			{
				return this._Topic;
			}
			set
			{
				this._Topic.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Watch", Storage="_Watch", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Watch> Watch
		{
			get
			{
				return this._Watch;
			}
			set
			{
				this._Watch.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Watch1", Storage="_Watch1", ThisKey="UserId", OtherKey="FollowingId")]
		public EntitySet<Watch> Watch1
		{
			get
			{
				return this._Watch1;
			}
			set
			{
				this._Watch1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_User", Storage="_Major", ThisKey="MajorId", OtherKey="MajorId", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.User.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._MajorId = value.MajorId;
					}
					else
					{
						this._MajorId = default(int);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_User", Storage="_Province", ThisKey="ProvinceId", OtherKey="ProvinceId", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.User.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._ProvinceId = value.ProvinceId;
					}
					else
					{
						this._ProvinceId = default(int);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Zan(Zan entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Zan(Zan entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Collect(Collect entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Collect(Collect entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Comment(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comment(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Fan(Fan entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Fan(Fan entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Fan1(Fan entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Fan1(Fan entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Message(Message entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Message(Message entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Message1(Message entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Message1(Message entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Photo(Photo entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Photo(Photo entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Topic(Topic entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Topic(Topic entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Watch(Watch entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Watch(Watch entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Watch1(Watch entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Watch1(Watch entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Watch")]
	public partial class Watch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WatchId;
		
		private int _UserId;
		
		private int _FollowingId;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWatchIdChanging(int value);
    partial void OnWatchIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFollowingIdChanging(int value);
    partial void OnFollowingIdChanged();
    #endregion
		
		public Watch()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WatchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WatchId
		{
			get
			{
				return this._WatchId;
			}
			set
			{
				if ((this._WatchId != value))
				{
					this.OnWatchIdChanging(value);
					this.SendPropertyChanging();
					this._WatchId = value;
					this.SendPropertyChanged("WatchId");
					this.OnWatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowingId", DbType="Int NOT NULL")]
		public int FollowingId
		{
			get
			{
				return this._FollowingId;
			}
			set
			{
				if ((this._FollowingId != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFollowingIdChanging(value);
					this.SendPropertyChanging();
					this._FollowingId = value;
					this.SendPropertyChanged("FollowingId");
					this.OnFollowingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Watch", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Watch.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Watch.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Watch1", Storage="_User1", ThisKey="FollowingId", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Watch1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Watch1.Add(this);
						this._FollowingId = value.UserId;
					}
					else
					{
						this._FollowingId = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
